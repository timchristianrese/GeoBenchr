benchmark:
  sut: "MobilityDB"
  mixed: False
  nodes:
    - ""
  threads: 16
  test: False
  random_seed: 1500

queryConfigs:

  # Temporal queries
  # use
  - name: countActiveRidesInPeriod
    use: True
    type: temporal
    sql: >
      SELECT COUNT(DISTINCT r.ride_id)
      FROM ride_points r
      WHERE r.timestamp BETWEEN :period_medium;
    repetition: 10
    parameters:
      - period_medium
  #use
  - name: averageRideDurationDuringDay
    use: True
    type: temporal
    sql: >
      SELECT AVG(max_ts - min_ts) AS avg_duration
      FROM (SELECT r.ride_id, MAX(timestamp) AS max_ts, MIN(timestamp) AS min_ts
      FROM ride_points r
      WHERE timestamp >= :day:timestamp
      AND timestamp < (:day::timestamp + INTERVAL '1 day') GROUP BY ride_id);
    repetition: 10
    parameters:
      - day
  #use
  - name: timeIntervalWithMostIncidentsDuringDay
    use: False
    type: temporal
    sql: >
      SELECT STRFTIME('%H:00', datetime(i.ts / 1000, 'unixepoch')) AS hour_interval,
      COUNT(*) AS incident_count
      FROM incidents i
      WHERE i.incident != 0 AND DATE(datetime(i.ts / 1000, 'unixepoh')) = :day
      GROUP BY hour_interval
      ORDER BY incident_count DESC
      LIMIT 1;
    repetition: 10
    parameters:
      - day


  # Spatial queries
  #use
  - name: countActiveRidesInDistrict
    use: True
    type: spatial
    sql: >
      SELECT d.name, COUNT(DISTINCT r.ride_id) AS ride_count
      FROM berlin_districts d
      JOIN ride_points r
      ON ST_Intersects(r.geom, d.geom)
      WHERE d.name = :district
      GROUP BY d.name;
    repetition: 10
    parameters:
      - district

  #use
  - name: ridesStartedInDistrict
    use: True
    type: spatial
    sql: >
      WITH ride_start AS (
      SELECT r.ride_id, MIN(r.timestamp) AS start_ts
      FROM ride_points r
      GROUP BY ride_id),
      start_points AS (
      SELECT r.ride_id, r.geom
      FROM ride_points r
      JOIN ride_start s
      ON r.ride_id = s.ride_id
      AND r.timestamp = s.start_ts)
      SELECT s.ride_id
      FROM start_points s
      JOIN berlin_districts d
      ON ST_Intersects(s.geom, d.geom)
      WHERE d.name = :district;
    repetition: 10
    parameters:
      - district

  #use
  - name: ridesCrossingPlaceWithMostIncidentsInDistrict # In a radius of 500m
    use: True
    type: spatial
    sql: >
      WITH incident_points AS (
      SELECT i.incident_id, i.geom
      FROM incidents i
      JOIN berlin_districts d
      ON ST_Within(i.geom, d.geom)
      WHERE d.name = :district),
      clusters AS (
      SELECT incident_id, geom,
      ST_ClusterWithin(geom, :distance) OVER () AS cluster
      FROM incident_points),
      hotspot AS (
      SELECT ST_SetSRID(ST_Centroid(ST_Collect(geom)), 4326) AS cluster_center
      FROM clusters
      GROUP BY cluster
      ORDER BY COUNT(*) DESC
      LIMIT 1)
      SELECT DISTINCT ON (r.ride_id) r.ride_id, r.rider_id
      FROM ride_points r
      CROSS JOIN hotspot h
      WHERE ST_DWithin(r.geom, h.cluster_center::geography, 500);

    repetition: 10
    parameters:
      - district
      - distance


  # Spatiotemporal queries
  # use
  - name: averageRideDurationToGoAtUniversityInPeriod
    use: True
    type: spatiotemporal
    sql: >
      WITH rides_in_period AS (
      SELECT DISTINCT r.ride_id
      FROM ride_points r
      WHERE r.timestamp BETWEEN :period_medium),
      ride_stats AS (
      SELECT r.ride_id, MIN(r.timestamp) AS start_ts, MAX(r.timestamp) AS end_ts
      FROM ride_points r
      JOIN rides_in_period rp
      ON r.ride_id = rp.ride_id
      GROUP BY r.ride_id)
      SELECT AVG(rs.end_ts - rs.start_ts) AS avg_duration
      FROM ride_stats rs
      JOIN ride_points rend
      ON rend.ride_id = rs.ride_id
      AND rend.timestamp = rs.end_ts
      JOIN universities u
      ON ST_DWithin(rend.geom, u.geom, 2500)
      WHERE u.name = :university;
    repetition: 10
    parameters:
      - period_medium
      - university

  - name: ridesCrossSeveralDistrictsOnEveningInPeriod
    use: False
    type: spatiotemporal
    sql: >
      WITH evening_rides AS (
      SELECT DISTINCT r.ride_id
      FROM ride_points r
      WHERE r.timestamp BETWEEN :period_medium
      AND EXTRACT(HOUR FROM r.timestamp) BETWEEN 18 AND 23
      ),
      ride_districts AS (
      SELECT er.ride_id, d.name
      FROM evening_rides er
      JOIN ride_points r
      ON r.ride_id = er.ride_id
      JOIN berlin_districts d
      ON ST_Intersects(r.geom, d.geom)
      GROUP BY er.ride_id, d.name
      )
      SELECT rd.ride_id
      FROM ride_districts rd
      GROUP BY rd.ride_id
      HAVING COUNT(*) > 1;
    repetition: 10
    parameters:
      - period_medium

  - name: incidentsNextUniversityInPeriod
    use: False
    type: spatiotemporal
    sql: >
      SELECT *
      FROM incidents i
      JOIN universities u
      ON ST_DWithin(ST_MakePoint(i.lon, i.lat), u.geom, 0.001)
      WHERE DATE(datetime(i.ts / 1000, 'unixepoh')) && :period_medium
      AND u.name = :university;
    repetition: 10
    parameters:
      - period_medium
      - university
