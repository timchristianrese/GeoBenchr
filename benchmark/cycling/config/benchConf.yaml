benchmark:
  sut: "MobilityDB"
  mixed: False
  nodes:
    - ""
  threads: 16
  test: False
  random_seed: 1500

queryConfigs:

  # Temporal queries
  # use
  - name: countActiveRidesInPeriod
    use: True
    type: temporal
    sql: >
      SELECT COUNT(*), :period_medium
      FROM rides r
      WHERE r.traj && :period_medium;
    repetition: 10
    parameters:
      - period_medium
  #use
  - name: averageRideDurationDuringDay
    use: True
    type: temporal
    sql: >
      SELECT AVG(duration(r.traj)) AS avg_duration
      FROM rides r
      WHERE r.traj && span(DATE :day::timestamp, DATE :day + INTERVAL '1 day' - INTERVAL '1 second');
    repetition: 10
    parameters:
      - day


  # Spatial queries
  #use
  - name: countActiveRidesInDistrict
    use: True
    type: spatial
    sql: >
      SELECT d.name, COUNT(*) AS ride_count
      FROM districts d
      JOIN rides r
      ON r.traj && d.geom
      WHERE d.name = :district AND st_intersects(r.traj, d.geom)
      GROUP BY d.name;
    repetition: 10
    parameters:
      - district

  #use
  - name: ridesStartedInDistrict
    use: True
    type: spatial
    sql: >
      SELECT r.ride_id
      FROM rides r
      JOIN districts d
      ON first(r.traj) && d.geom
      WHERE d.name = :district;
    repetition: 10
    parameters:
      - district


  # Spatiotemporal queries
  # use
  - name: averageRideDurationToGoAtUniversityInPeriod
    use: True
    type: spatiotemporal
    sql: >
      SELECT AVG(duration(r.traj)) AS avg_duration
      FROM rides r
      JOIN universities u
      ON ST_DWithin(last(r.traj), u.geom, 0.001)
      WHERE r.traj && :period_medium
      AND u.name = :university;
    repetition: 10
    parameters:
      - period_medium
      - university

  - name: ridesCrossSeveralDistrictsOnEveningInPeriod
    use: True
    type: spatiotemporal
    sql: >
      WITH evening_rides AS (
      SELECT *
      FROM rides r
      WHERE r.traj && :period_medium
      AND EXISTS (
      SELECT 1
      FROM unnest(getTime(r.traj)) AS t
      WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23)
      ),
      ride_districts AS (
      SELECT r.ride_id, d.name
      FROM evening_rides r
      JOIN districts d ON ST_Intersects(r.traj, d.geom)
      GROUP BY r.ride_id, d.name)
      SELECT ride_id
      FROM ride_districts
      GROUP BY ride_id
      HAVING COUNT(*) > 1;
    repetition: 10
    parameters:
      - period_medium
