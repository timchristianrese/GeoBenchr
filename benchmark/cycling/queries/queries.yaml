- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-04-28 03:35:08'', ''2023-05-01 12:29:28''] FROM rides
    r WHERE r.traj && [''2023-04-28 03:35:08'', ''2023-05-01 12:29:28''];

    '
  params:
  - - '2023-04-28 03:35:08'
    - '2023-05-01 12:29:28'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-05-08 11:44:34'', ''2023-05-12 13:50:33''] FROM rides
    r WHERE r.traj && [''2023-05-08 11:44:34'', ''2023-05-12 13:50:33''];

    '
  params:
  - - '2023-05-08 11:44:34'
    - '2023-05-12 13:50:33'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-05-23 17:42:03'', ''2023-06-02 09:46:26''] FROM rides
    r WHERE r.traj && [''2023-05-23 17:42:03'', ''2023-06-02 09:46:26''];

    '
  params:
  - - '2023-05-23 17:42:03'
    - '2023-06-02 09:46:26'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-10-24 14:14:57'', ''2023-10-30 04:43:15''] FROM rides
    r WHERE r.traj && [''2023-10-24 14:14:57'', ''2023-10-30 04:43:15''];

    '
  params:
  - - '2023-10-24 14:14:57'
    - '2023-10-30 04:43:15'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-05-24 02:52:20'', ''2023-05-29 13:02:57''] FROM rides
    r WHERE r.traj && [''2023-05-24 02:52:20'', ''2023-05-29 13:02:57''];

    '
  params:
  - - '2023-05-24 02:52:20'
    - '2023-05-29 13:02:57'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-04-18 14:23:50'', ''2023-04-20 23:39:18''] FROM rides
    r WHERE r.traj && [''2023-04-18 14:23:50'', ''2023-04-20 23:39:18''];

    '
  params:
  - - '2023-04-18 14:23:50'
    - '2023-04-20 23:39:18'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-10-24 05:01:02'', ''2023-11-07 03:35:22''] FROM rides
    r WHERE r.traj && [''2023-10-24 05:01:02'', ''2023-11-07 03:35:22''];

    '
  params:
  - - '2023-10-24 05:01:02'
    - '2023-11-07 03:35:22'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-04-06 21:50:50'', ''2023-04-19 21:11:35''] FROM rides
    r WHERE r.traj && [''2023-04-06 21:50:50'', ''2023-04-19 21:11:35''];

    '
  params:
  - - '2023-04-06 21:50:50'
    - '2023-04-19 21:11:35'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-11-10 07:57:42'', ''2023-11-21 05:56:14''] FROM rides
    r WHERE r.traj && [''2023-11-10 07:57:42'', ''2023-11-21 05:56:14''];

    '
  params:
  - - '2023-11-10 07:57:42'
    - '2023-11-21 05:56:14'
- name: countActiveRidesInPeriod
  type: temporal
  sql: 'SELECT COUNT(*), [''2023-06-23 10:41:03'', ''2023-07-03 04:35:50''] FROM rides
    r WHERE r.traj && [''2023-06-23 10:41:03'', ''2023-07-03 04:35:50''];

    '
  params:
  - - '2023-06-23 10:41:03'
    - '2023-07-03 04:35:50'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-07-06::timestamp, DATE 2023-07-06 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-07-06'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-07-10::timestamp, DATE 2023-07-10 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-07-10'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-01-09::timestamp, DATE 2023-01-09 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-01-09'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-04-24::timestamp, DATE 2023-04-24 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-04-24'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-03-27::timestamp, DATE 2023-03-27 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-03-27'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-01-12::timestamp, DATE 2023-01-12 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-01-12'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-09-29::timestamp, DATE 2023-09-29 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-09-29'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-07-24::timestamp, DATE 2023-07-24 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-07-24'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-09-05::timestamp, DATE 2023-09-05 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-09-05'
- name: averageRideDurationDuringDay
  type: temporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r WHERE r.traj &&
    span(DATE 2023-06-16::timestamp, DATE 2023-06-16 + INTERVAL ''1 day'' - INTERVAL
    ''1 second'');

    '
  params:
  - '2023-06-16'
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Lichtenberg AND st_intersects(r.traj, d.geom) GROUP BY
    d.name;

    '
  params:
  - Lichtenberg
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Neukölln AND st_intersects(r.traj, d.geom) GROUP BY d.name;

    '
  params:
  - Neukölln
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Charlottenburg-Wilmersdorf AND st_intersects(r.traj,
    d.geom) GROUP BY d.name;

    '
  params:
  - Charlottenburg-Wilmersdorf
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Friedrichshain-Kreuzberg AND st_intersects(r.traj, d.geom)
    GROUP BY d.name;

    '
  params:
  - Friedrichshain-Kreuzberg
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Tempelhof-Schöneberg AND st_intersects(r.traj, d.geom)
    GROUP BY d.name;

    '
  params:
  - Tempelhof-Schöneberg
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Neukölln AND st_intersects(r.traj, d.geom) GROUP BY d.name;

    '
  params:
  - Neukölln
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Charlottenburg-Wilmersdorf AND st_intersects(r.traj,
    d.geom) GROUP BY d.name;

    '
  params:
  - Charlottenburg-Wilmersdorf
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Steglitz-Zehlendorf AND st_intersects(r.traj, d.geom)
    GROUP BY d.name;

    '
  params:
  - Steglitz-Zehlendorf
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Charlottenburg-Wilmersdorf AND st_intersects(r.traj,
    d.geom) GROUP BY d.name;

    '
  params:
  - Charlottenburg-Wilmersdorf
- name: countActiveRidesInDistrict
  type: spatial
  sql: 'SELECT d.name, COUNT(*) AS ride_count FROM districts d JOIN rides r ON r.traj
    && d.geom WHERE d.name = Reinickendorf AND st_intersects(r.traj, d.geom) GROUP
    BY d.name;

    '
  params:
  - Reinickendorf
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Marzahn-Hellersdorf;

    '
  params:
  - Marzahn-Hellersdorf
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Pankow;

    '
  params:
  - Pankow
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Friedrichshain-Kreuzberg;

    '
  params:
  - Friedrichshain-Kreuzberg
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Pankow;

    '
  params:
  - Pankow
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Mitte;

    '
  params:
  - Mitte
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Friedrichshain-Kreuzberg;

    '
  params:
  - Friedrichshain-Kreuzberg
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Lichtenberg;

    '
  params:
  - Lichtenberg
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Lichtenberg;

    '
  params:
  - Lichtenberg
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Pankow;

    '
  params:
  - Pankow
- name: ridesStartedInDistrict
  type: spatial
  sql: 'SELECT r.ride_id FROM rides r JOIN districts d ON first(r.traj) && d.geom
    WHERE d.name = Charlottenburg-Wilmersdorf;

    '
  params:
  - Charlottenburg-Wilmersdorf
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-12-27 09:37:01'',
    ''2023-12-31 23:59:59''] AND u.name = Technische-Universität-Berlin;

    '
  params:
  - - '2023-12-27 09:37:01'
    - '2023-12-31 23:59:59'
  - Technische-Universität-Berlin
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-11-07 19:24:50'',
    ''2023-11-15 16:44:10''] AND u.name = Universität-der-Künste-Berlin;

    '
  params:
  - - '2023-11-07 19:24:50'
    - '2023-11-15 16:44:10'
  - Universität-der-Künste-Berlin
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-08-23 20:30:34'',
    ''2023-09-02 22:23:24''] AND u.name = Humboldt-Universität-zu-Berlin;

    '
  params:
  - - '2023-08-23 20:30:34'
    - '2023-09-02 22:23:24'
  - Humboldt-Universität-zu-Berlin
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-10-12 21:04:16'',
    ''2023-10-24 15:17:19''] AND u.name = European-School-of-Management-and-Technology-Berlin;

    '
  params:
  - - '2023-10-12 21:04:16'
    - '2023-10-24 15:17:19'
  - European-School-of-Management-and-Technology-Berlin
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-08-17 21:48:08'',
    ''2023-08-26 12:11:01''] AND u.name = Freie-Universität-Berlin;

    '
  params:
  - - '2023-08-17 21:48:08'
    - '2023-08-26 12:11:01'
  - Freie-Universität-Berlin
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-07-27 01:52:07'',
    ''2023-08-11 01:10:37''] AND u.name = Bard-College;

    '
  params:
  - - '2023-07-27 01:52:07'
    - '2023-08-11 01:10:37'
  - Bard-College
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-12-29 06:09:51'',
    ''2023-12-31 23:59:59''] AND u.name = Universität-der-Künste-Berlin;

    '
  params:
  - - '2023-12-29 06:09:51'
    - '2023-12-31 23:59:59'
  - Universität-der-Künste-Berlin
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-04-14 13:12:17'',
    ''2023-04-20 06:28:31''] AND u.name = Charité-Campus-Klinik;

    '
  params:
  - - '2023-04-14 13:12:17'
    - '2023-04-20 06:28:31'
  - Charité-Campus-Klinik
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-05-11 16:40:10'',
    ''2023-05-19 00:37:24''] AND u.name = Katholische-Hochschule-für-Sozialwesen-Berlin;

    '
  params:
  - - '2023-05-11 16:40:10'
    - '2023-05-19 00:37:24'
  - Katholische-Hochschule-für-Sozialwesen-Berlin
- name: averageRideDurationToGoAtUniversityInPeriod
  type: spatiotemporal
  sql: 'SELECT AVG(duration(r.traj)) AS avg_duration FROM rides r JOIN universities
    u ON ST_DWithin(last(r.traj), u.geom, 0.001) WHERE r.traj && [''2023-10-29 14:33:58'',
    ''2023-11-10 01:22:46''] AND u.name = Charité-Campus-Klinik;

    '
  params:
  - - '2023-10-29 14:33:58'
    - '2023-11-10 01:22:46'
  - Charité-Campus-Klinik
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-01-14
    20:08:47'', ''2023-01-27 13:11:05''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-01-14 20:08:47'
    - '2023-01-27 13:11:05'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-09-19
    16:55:17'', ''2023-09-27 22:41:42''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-09-19 16:55:17'
    - '2023-09-27 22:41:42'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-11-24
    20:18:00'', ''2023-12-05 03:04:31''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-11-24 20:18:00'
    - '2023-12-05 03:04:31'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-03-07
    21:25:45'', ''2023-03-19 12:09:33''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-03-07 21:25:45'
    - '2023-03-19 12:09:33'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-11-23
    03:58:53'', ''2023-11-30 07:46:56''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-11-23 03:58:53'
    - '2023-11-30 07:46:56'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-09-10
    18:41:21'', ''2023-09-22 15:52:23''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-09-10 18:41:21'
    - '2023-09-22 15:52:23'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-05-08
    19:20:14'', ''2023-05-11 19:06:18''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-05-08 19:20:14'
    - '2023-05-11 19:06:18'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-08-07
    22:56:33'', ''2023-08-12 00:18:51''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-08-07 22:56:33'
    - '2023-08-12 00:18:51'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-02-12
    16:30:25'', ''2023-02-26 01:52:26''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-02-12 16:30:25'
    - '2023-02-26 01:52:26'
- name: ridesCrossSeveralDistrictsOnEveningInPeriod
  type: spatiotemporal
  sql: 'WITH evening_rides AS ( SELECT * FROM rides r WHERE r.traj && [''2023-11-26
    12:52:19'', ''2023-12-07 16:52:34''] AND EXISTS ( SELECT 1 FROM unnest(getTime(r.traj))
    AS t WHERE EXTRACT(HOUR FROM t) BETWEEN 18 AND 23) ), ride_districts AS ( SELECT
    r.ride_id, d.name FROM evening_rides r JOIN districts d ON ST_Intersects(r.traj,
    d.geom) GROUP BY r.ride_id, d.name) SELECT ride_id FROM ride_districts GROUP BY
    ride_id HAVING COUNT(*) > 1;

    '
  params:
  - - '2023-11-26 12:52:19'
    - '2023-12-07 16:52:34'
