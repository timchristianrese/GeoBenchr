import threading
import random
import time
import os
import csv
import sys
import subprocess
import json
import yaml


def generate_random_position_in_Berlin():
    poslong = random.uniform(13.088346, 13.761160)
    poslat = random.uniform(52.338049, 52.675454)
    return poslong, poslat

def clear_table(table):
    try:
        
        print(f"Table {table} cleared successfully")
    except (Exception) as error:
        print("Error while connecting", error)
    finally:
        #wrap up benchmark
        print("Done")


def get_max_ride_id():
    try:
        #get max ride ID from GeoMesa

        # cursor = 
        # cursor.execute("SELECT MAX(ride_id) FROM cycling_data;")
        records = ""
        return records[0][0]
    except (Exception) as error:
        print("Error while connecting", error)
    finally:
        print("Done")
def get_terraform_output(deployment = "multi"):
    original_dir = os.getcwd()

    path = os.path.join("../../../geomesa-accumulo/gcp", deployment)

    # Change the current working directory
    os.chdir(path)

    # Run the terraform output command
    result = subprocess.run(['terraform', 'output', '-json'], stdout=subprocess.PIPE)
    print(result)
    # Parse the output as JSON
    output = json.loads(result.stdout)
    # ... change the directory and do stuff ...
    os.chdir(original_dir)
    return output


def execute_query(query_type, limit):
    try:
    #match case in python
        match query_type:
            case "surrounding":
                poslong, poslat = generate_random_position_in_Berlin()
                #replace -q "" with -q"$query"
                query = f"DWITHIN(geom, POINT({poslong} {poslat}), 5000, meters)"
                final_query = ssh_point.replace("-q \"\"", f"-q \"{query}\"")
                if(limit == -1):
                    final_query = final_query.replace("-m", "")
                else:
                    final_query = final_query.replace("-m", f"-m {limit}")
                print(final_query)
                
                start = time.time()
                #run the query in the shell
                result = subprocess.run(final_query, shell=True, stdout=subprocess.PIPE)

                #run the query here
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                records = ""

                print(records)
                
                # get paths between two random points

            #get intersections of a specific ride    
            case "ride_traffic":
                ride_id = random.randint(1, 596)
                #create a random multilinestring through berlin, for now make it diagonal in 0.001 steps

                #static berlin route for testing
                random_berlin_route = "MULTILINESTRING((13.322460787525715 52.51174123454288,13.32245769 52.51174074,13.32245459 52.51174024,13.32245149 52.51173975,13.32244839 52.51173925,13.32244529 52.51173876,13.32244219 52.51173826,13.32243909 52.51173777,13.32243599 52.51173727,13.32243289 52.51173678,13.32242979 52.51173628,13.322426686914428 52.51173578595128,13.32241838 52.51173458,13.32241007 52.51173338,13.32240176 52.51173217,13.32239346 52.51173097,13.32238515 52.51172976,13.32237684 52.51172856,13.32236853 52.51172735,13.32236023 52.51172615,13.32235192 52.51172494,13.32234361 52.51172374,13.3223353 52.51172254,13.322326996999193 52.51172133037306,13.32232274 52.51171463,13.32231849 52.51170793,13.32231424 52.51170123,13.32230999 52.51169453,13.32230574 52.51168783,13.32230148 52.51168113,13.32229723 52.51167443,13.32229298 52.51166773,13.32228873 52.51166103,13.32228448 52.51165433,13.32228022 52.51164763,13.322275970744974 52.51164093054988,13.32227768 52.51163157,13.32227939 52.5116222,13.32228109 52.51161283,13.3222828 52.51160347,13.32228451 52.5115941,13.32228621 52.51158474,13.32228792 52.51157537,13.32228963 52.51156601,13.32229134 52.51155664,13.32229304 52.51154728,13.32229475 52.51153791,13.322296456660233 52.5115285458029,13.32230429 52.5115191,13.32231213 52.51150966,13.32231997 52.51150021,13.32232781 52.51149077,13.32233564 52.51148132,13.32234348 52.51147188,13.32235132 52.51146243,13.32235915 52.51145298,13.32236699 52.51144354,13.32237483 52.51143409,13.32238267 52.51142465,13.322390502980149 52.51141520449734,13.32240191 52.51140923,13.32241331 52.51140326,13.32242472 52.51139729,13.32243613 52.51139132,13.32244753 52.51138535,13.32245894 52.51137938,13.32247034 52.51137341,13.32248175 52.51136744,13.32249316 52.51136147,13.32250456 52.5113555,13.32251597 52.51134953,13.322527372367954 52.511343558790685,13.32252929 52.51133808,13.32253121 52.51133259,13.32253313 52.51132711,13.32253505 52.51132163,13.32253697 52.51131615,13.32253889 52.51131067,13.32254081 52.51130519,13.32254273 52.5112997,13.32254465 52.51129422,13.32254657 52.51128874,13.32254849 52.51128326,13.32255040849774 52.511277775216385,13.32253303 52.51127389,13.32251566 52.51127001,13.32249829 52.51126613,13.32248091 52.51126224,13.32246354 52.51125836,13.32244617 52.51125448,13.32242879 52.5112506,13.32241142 52.51124671,13.32239405 52.51124283,13.32237667 52.51123895,13.3223593 52.51123507,13.322341924262275 52.51123118253165,13.32231552 52.51122891,13.32228912 52.51122663,13.32226272 52.51122435,13.32223632 52.51122208,13.32220991 52.5112198,13.32218351 52.51121752,13.32215711 52.51121525,13.32213071 52.51121297,13.32210431 52.51121069,13.3220779 52.51120842,13.3220515 52.51120614,13.322025100352327 52.51120386486578,13.32199738 52.51120214,13.32196965 52.51120041,13.32194193 52.51119869,13.32191421 52.51119696,13.32188649 52.51119523,13.32185876 52.51119351,13.32183104 52.51119178,13.32180332 52.51119005,13.32177559 52.51118833,13.32174787 52.5111866,13.32172015 52.51118487,13.321692425857028 52.51118314587574,13.32166632 52.51118346,13.32164021 52.51118378,13.3216141 52.51118409,13.32158799 52.51118441,13.32156188 52.51118472,13.32153578 52.51118504,13.32150967 52.51118535,13.32148356 52.51118567,13.32145745 52.51118598,13.32143134 52.5111863,13.32140523 52.51118661,13.321379126288166 52.511186930356494,13.32134879 52.51118661,13.32131845 52.51118629,13.32128811 52.51118597,13.32125777 52.51118565,13.32122743 52.51118533,13.32119709 52.51118501,13.32116675 52.51118469,13.32113641 52.51118437,13.32110608 52.51118405,13.32107574 52.51118373,13.321045397577029 52.51118341221601,13.32102111 52.5111811,13.32099681 52.51117878,13.32097252 52.51117647,13.32094823 52.51117415,13.32092394 52.51117184,13.32089965 52.51116952,13.32087536 52.51116721,13.32085106 52.5111649,13.32082677 52.51116258,13.32080248 52.51116027,13.32077819 52.51115795,13.320753897252011 52.511155636740405,13.32073258 52.51115518,13.32071126 52.51115473,13.32068994 52.51115428,13.32066862 52.51115383,13.3206473 52.51115337,13.32062598 52.51115292,13.32060466 52.51115247,13.32058334 52.51115202,13.32056202 52.51115156,13.3205407 52.51115111,13.32051938 52.51115066,13.32049806143362 52.51115020467013,13.32047292 52.51114916,13.32044777 52.51114811,13.32042263 52.51114706,13.32039748 52.51114602,13.32037234 52.51114497,13.3203472 52.51114392,13.32032205 52.51114288,13.32029691 52.51114183,13.32027176 52.51114078,13.32024662 52.51113974,13.32022147 52.51113869,13.320196330404212 52.51113764481666,13.32017039 52.51113634,13.32014446 52.51113503,13.32011852 52.51113373,13.32009258 52.51113242,13.32006664 52.51113112,13.3200407 52.51112981,13.32001477 52.51112851,13.31998883 52.5111272,13.31996289 52.5111259,13.31993695 52.51112459,13.31991102 52.51112329,13.319885079404076 52.51112197975556,13.3198607 52.51112032,13.31983632 52.51111867,13.31981195 52.51111701,13.31978757 52.51111535,13.31976319 52.51111369,13.31973882 52.51111204,13.31971444 52.51111038,13.31969006 52.51110872,13.31966568 52.51110707,13.31964131 52.51110541,13.31961693 52.51110375,13.31959255149585 52.51110209371752,13.31956236 52.51109973,13.31953216 52.51109737,13.31950197 52.51109501,13.31947177 52.51109265,13.31944158 52.51109029,13.31941138 52.51108793,13.31938119 52.51108557,13.319351 52.51108321,13.3193208 52.51108085,13.31929061 52.51107849,13.31926041 52.51107613,13.319230217137536 52.51107376987247,13.31920465 52.51107391,13.31917909 52.51107406,13.31915353 52.5110742,13.31912797 52.51107435,13.3191024 52.51107449,13.31907684 52.51107464,13.31905128 52.51107478,13.31902572 52.51107493,13.31900015 52.51107507,13.31897459 52.51107522,13.31894903 52.51107536,13.318923465924533 52.51107550741376,13.31890045 52.51107312,13.31887743 52.51107073,13.31885441 52.51106835,13.31883139 52.51106596,13.31880837 52.51106358,13.31878535 52.51106119,13.31876233 52.5110588,13.31873932 52.51105642,13.3187163 52.51105403,13.31869328 52.51105164,13.31867026 52.51104926,13.318647240148 52.51104687157553,13.31863048 52.51104616,13.31861373 52.51104545,13.31859697 52.51104474,13.31858021 52.51104403,13.31856345 52.51104332,13.3185467 52.51104261,13.31852994 52.51104189,13.31851318 52.51104118,13.31849642 52.51104047,13.31847967 52.51103976,13.31846291 52.51103905,13.318446152365938 52.51103833958752,13.31843473 52.511037,13.3184233 52.51103566,13.31841187 52.51103432,13.31840045 52.51103298,13.31838902 52.51103164,13.31837759 52.5110303,13.31836616 52.51102896,13.31835474 52.51102762,13.31834331 52.51102628,13.31833188 52.51102494,13.318320457915368 52.51102360354048,13.31830964 52.51102067,13.31829882 52.51101773,13.31828801 52.51101479,13.31827719 52.51101185,13.31826637 52.51100892,13.31825555 52.51100598,13.31824474 52.51100304,13.31823392 52.5110001,13.3182231 52.51099717,13.31821228 52.51099423,13.31820147 52.51099129,13.318190647507317 52.51098835453252,13.31818683 52.51098017,13.31818301 52.51097198,13.31817919 52.51096379,13.31817536 52.5109556,13.31817154 52.51094741,13.31816772 52.51093922,13.3181639 52.51093103,13.31816008 52.51092284,13.31815626 52.51091465,13.31815244 52.51090646,13.31814862 52.51089827,13.31814479969809 52.51089008265403,13.31813998 52.51087863,13.31813516 52.51086718,13.31813034 52.51085572,13.31812552 52.51084427,13.3181207 52.51083282,13.31811588 52.51082136,13.31811106 52.51080991,13.31810623 52.51079846,13.31810141 52.510787,13.31809659 52.51077555,13.31809177 52.5107641,13.3180869522614 52.51075264510773,13.31808152 52.51073925,13.31807609 52.51072586,13.31807066 52.51071247,13.31806523 52.51069908,13.31805979 52.51068568,13.31805436 52.51067229,13.31804893 52.5106589,13.3180435 52.51064551,13.31803807 52.51063212,13.31803264 52.51061872,13.3180272 52.51060533,13.318021772144826 52.510591938548735,13.3180173 52.51057677,13.31801283 52.51056159,13.31800836 52.51054642,13.31800389 52.51053125,13.31799942 52.51051608,13.31799495 52.5105009,13.31799048 52.51048573,13.31798601 52.51047056,13.31798154 52.51045539,13.31797707 52.51044022,13.3179726 52.51042504,13.317968129989486 52.51040987062472,13.31796329 52.51039589,13.31795844 52.51038192,13.3179536 52.51036794,13.31794876 52.51035396,13.31794391 52.51033999,13.31793907 52.51032601,13.31793423 52.51031203,13.31792938 52.51029806,13.31792454 52.51028408,13.3179197 52.5102701,13.31791485 52.51025613,13.317910010477016 52.510242149573195,13.31790626 52.51022916,13.31790251 52.51021618,13.31789875 52.51020319,13.317895 52.51019021,13.31789125 52.51017722,13.3178875 52.51016424,13.31788375 52.51015125,13.31787999 52.51013827,13.31787624 52.51012528,13.31787249 52.5101123,13.31786874 52.51009931,13.317864984460703 52.51008632606316,13.31786224 52.51007217,13.31785949 52.51005801,13.31785675 52.51004386,13.317854 52.5100297,13.31785126 52.51001554,13.31784851 52.51000139,13.31784577 52.50998723,13.31784302 52.50997307,13.31784028 52.50995892,13.31783753 52.50994476,13.31783479 52.5099306,13.31783203963345 52.509916445669624,13.31782937 52.50990321,13.31782671 52.50988997,13.31782404 52.50987673,13.31782138 52.5098635,13.31781871 52.50985026,13.31781605 52.50983702,13.31781338 52.50982378,13.31781072 52.50981055,13.31780805 52.50979731,13.31780539 52.50978407,13.31780272 52.50977084,13.317800056184357 52.50975759822881,13.31779611 52.50974516,13.31779216 52.50973273,13.31778821 52.5097203,13.31778426 52.50970786,13.3177803 52.50969543,13.31777635 52.50968299,13.3177724 52.50967056,13.31776845 52.50965813,13.3177645 52.50964569,13.31776055 52.50963326,13.3177566 52.50962082,13.31775265290561 52.509608389940446,13.31774909 52.50959636,13.31774553 52.50958432,13.31774197 52.50957229,13.31773841 52.50956026,13.31773485 52.50954823,13.31773129 52.5095362,13.31772773 52.50952416,13.31772417 52.50951213,13.31772061 52.5095001,13.31771705 52.50948807,13.31771349 52.50947603,13.317709932108952 52.50946400018553,13.31770878 52.50945553,13.31770764 52.50944707,13.31770649 52.5094386,13.31770534 52.50943014,13.3177042 52.50942167,13.31770305 52.50941321,13.3177019 52.50940474,13.31770075 52.50939628,13.31769961 52.50938781,13.31769846 52.50937935,13.317697313110552 52.50937088194585,13.31769502 52.50936425,13.31769273 52.50935761,13.31769044 52.50935098,13.31768815 52.50934434,13.31768585 52.5093377,13.31768356 52.50933107,13.31768127 52.50932443,13.31767898 52.5093178,13.31767669 52.50931116,13.3176744 52.50930453,13.3176721 52.50929789,13.317669811539997 52.509291255994704,13.3176681 52.5092889,13.31766639 52.50928654,13.31766469 52.50928419,13.31766298 52.50928183,13.31766127 52.50927947,13.31765956 52.50927712,13.31765785 52.50927476,13.31765614 52.50927241,13.31765443 52.50927005,13.31765272 52.50926769,13.31765102 52.50926534,13.317649307231036 52.50926298115043,13.31764945 52.50925308,13.3176496 52.50924318,13.31764975 52.50923327,13.31764989 52.50922337,13.31765004 52.50921347,13.31765018 52.50920357,13.31765033 52.50919366,13.31765048 52.50918376,13.31765062 52.50917386,13.31765077 52.50916395,13.31765092 52.50915405,13.317651061277363 52.50914414942832,13.31765354 52.50912931,13.31765602 52.50911447,13.3176585 52.50909963,13.31766098 52.50908479,13.31766346 52.50906995,13.31766594 52.50905511,13.31766841 52.50904028,13.31767089 52.50902544,13.31767337 52.5090106,13.31767585 52.50899576,13.31767833 52.50898092,13.317680808868865 52.508966079919375,13.31768011 52.50894595,13.31767941 52.50892582,13.31767871 52.50890569,13.31767801 52.50888556,13.31767731 52.50886543,13.3176766 52.5088453,13.3176759 52.50882516,13.3176752 52.50880503,13.3176745 52.5087849,13.3176738 52.50876477,13.3176731 52.50874464,13.317672399839378 52.50872451096035,13.31766928 52.50870829,13.31766616 52.50869208,13.31766304 52.50867586,13.31765992 52.50865964,13.3176568 52.50864342,13.31765368 52.50862721,13.31765056 52.50861099,13.31764744 52.50859477,13.31764432 52.50857855,13.3176412 52.50856234,13.31763808 52.50854612,13.317634959066144 52.50852990138239,13.3176278 52.50851316,13.31762064 52.50849643,13.31761348 52.50847969,13.31760631 52.50846295,13.31759915 52.50844621,13.31759199 52.50842948,13.31758483 52.50841274,13.31757767 52.508396,13.31757051 52.50837926,13.31756335 52.50836252,13.31755618 52.50834579,13.31754902295498 52.50832904877217,13.31754157 52.50831057,13.31753412 52.50829208,13.31752667 52.5082736,13.31751922 52.50825512,13.31751177 52.50823664,13.31750432 52.50821815,13.31749687 52.50819967,13.31748942 52.50818119,13.31748197 52.50816271,13.31747452 52.50814422,13.31746707 52.50812574,13.31745962 52.50810726,13.31745217 52.50808878,13.31744472 52.50807029,13.31743727 52.50805181,13.317429816210176 52.50803332919743,13.31742028 52.50801593,13.31741074 52.50799852,13.31740121 52.50798112,13.31739167 52.50796372,13.31738214 52.50794631,13.3173726 52.50792891,13.31736306 52.50791151,13.31735353 52.5078941,13.31734399 52.5078767,13.31733446 52.5078593,13.31732492 52.50784189,13.317315383163614 52.50782449128434,13.31731974 52.50779935,13.3173241 52.50777421,13.31732845 52.50774907,13.31733281 52.50772392,13.31733716 52.50769878,13.31734152 52.50767364,13.31734588 52.5076485,13.31735023 52.50762336,13.31735459 52.50759822,13.31735894 52.50757308,13.3173633 52.50754793,13.317367656563112 52.50752279217757,13.31736594 52.50749977,13.31736423 52.50747676,13.31736252 52.50745374,13.3173608 52.50743072,13.31735909 52.50740771,13.31735738 52.50738469,13.31735566 52.50736167,13.31735395 52.50733865,13.31735223 52.50731564,13.31735052 52.50729262,13.31734881 52.5072696,13.31734709387404 52.50724658366663,13.31734249 52.50722453,13.31733789 52.50720247,13.31733328 52.50718042,13.31732868 52.50715836,13.31732408 52.50713631,13.31731947 52.50711425,13.31731487 52.5070922,13.31731027 52.50707014,13.31730567 52.50704809,13.31730106 52.50702603,13.317296458671413 52.507003976175845,13.31729197 52.50698884,13.31728748 52.5069737,13.31728298 52.50695855,13.31727849 52.50694341,13.317274 52.50692827,13.31726951 52.50691313,13.31726502 52.50689799,13.31726053 52.50688285,13.31725604 52.50686771,13.31725155 52.50685257,13.31724705 52.50683743,13.317242563243 52.50682229097817,13.31723772 52.50680656,13.31723288 52.50679082,13.31722803 52.50677509,13.31722319 52.50675935,13.31721835 52.50674362,13.3172135 52.50672788,13.31720866 52.50671215,13.31720382 52.50669641,13.31719897 52.50668068,13.31719413 52.50666494,13.31718928 52.50664921,13.31718444104686 52.50663347147663,13.31718133 52.50662114,13.31717821 52.50660882,13.3171751 52.50659649,13.31717198 52.50658416,13.31716887 52.50657184,13.31716576 52.50655951,13.31716264 52.50654718,13.31715953 52.50653485,13.31715641 52.50652253,13.3171533 52.5065102,13.31715018 52.50649787,13.31714706943631 52.50648554401368,13.31714475 52.50647206,13.31714243 52.50645858,13.31714011 52.50644509,13.31713779 52.50643161,13.31713547 52.50641812,13.31713314 52.50640464,13.31713082 52.50639115,13.3171285 52.50637767,13.31712618 52.50636418,13.31712386 52.5063507,13.31712154 52.50633722,13.317119219944429 52.50632373065334,13.31712428 52.50632397,13.31712933 52.50632421,13.31713439 52.50632445,13.31713944 52.50632469,13.3171445 52.50632493,13.31714955 52.50632516,13.31715461 52.5063254,13.31715966 52.50632564,13.31716472 52.50632588,13.31716977 52.50632612,13.31717483 52.50632636,13.317179883648322 52.50632659850768,13.31716873 52.5063264,13.31715758 52.5063262,13.31714642 52.50632599,13.31713527 52.50632579,13.31712412 52.50632559,13.31711297 52.50632539,13.31710181 52.50632519,13.31709066 52.50632499,13.31707951 52.50632479,13.31706835 52.50632459,13.3170572 52.50632438,13.31704604638392 52.50632418278027,13.31702814 52.50632625,13.31701024 52.50632831,13.31699233 52.50633037,13.31697443 52.50633244,13.31695653 52.5063345,13.31693862 52.50633657,13.31692072 52.50633863,13.31690282 52.50634069,13.31688491 52.50634276,13.31686701 52.50634482,13.3168491 52.50634689,13.316831199361662 52.50634894904549,13.3168115 52.50635346,13.31679181 52.50635796,13.31677211 52.50636247,13.31675241 52.50636698,13.31673272 52.50637149,13.31671302 52.506376,13.31669332 52.5063805,13.31667363 52.50638501,13.31665393 52.50638952,13.31663423 52.50639403,13.31661453 52.50639854,13.31659483821176 52.50640304461015,13.31657539 52.50640459,13.31655594 52.50640613,13.31653649 52.50640767,13.31651704 52.50640921,13.31649759 52.50641075,13.31647814 52.50641229,13.31645869 52.50641383,13.31643924 52.50641537,13.31641979 52.50641691,13.31640034 52.50641845,13.31638089 52.50641999,13.31636144355109 52.50642152970503,13.31633678 52.50642319,13.31631212 52.50642486,13.31628746 52.50642652,13.3162628 52.50642819,13.31623814 52.50642985,13.31621348 52.50643152,13.31618882 52.50643318,13.31616416 52.50643484,13.3161395 52.50643651,13.31611484 52.50643817,13.316090176969034 52.50643983683527,13.31606335 52.50644074,13.31603653 52.50644164,13.3160097 52.50644254,13.31598288 52.50644345,13.31595605 52.50644435,13.31592922 52.50644525,13.3159024 52.50644615,13.31587557 52.50644705,13.31584875 52.50644796,13.31582192 52.50644886,13.3157951 52.50644976,13.315768271665164 52.50645066404317,13.31574837 52.50645371,13.31572846 52.50645675,13.31570856 52.50645979,13.31568865 52.50646283,13.31566875 52.50646587,13.31564885 52.50646891,13.31562894 52.50647195,13.31560904 52.50647499,13.31558913 52.50647804,13.31556923 52.50648108,13.31554932 52.50648412,13.315529419602964 52.506487159834215,13.31551281 52.50649061,13.3154962 52.50649406,13.31547959 52.50649751,13.31546297 52.50650096,13.31544636 52.50650441,13.31542975 52.50650786,13.31541314 52.50651131,13.31539653 52.50651476,13.31537992 52.50651821,13.31536331 52.50652167,13.3153467 52.50652512,13.315330085656273 52.506528566169465,13.31530766 52.50653358,13.31528522 52.5065386,13.31526279 52.50654362,13.31524036 52.50654863,13.31521793 52.50655365,13.3151955 52.50655867,13.31517307 52.50656368,13.31515064 52.5065687,13.31512821 52.50657372,13.31510578 52.50657874,13.31508335 52.50658375,13.315060920356231 52.50658876935488,13.3150379 52.50659499,13.31501489 52.50660121,13.31499187 52.50660743,13.31496885 52.50661366,13.31494583 52.50661988,13.31492282 52.5066261,13.3148998 52.50663232,13.31487678 52.50663854,13.31485376 52.50664477,13.31483075 52.50665099,13.31480773 52.50665721,13.314784711700792 52.506663430398824,13.31476004 52.50667123,13.31473537 52.50667904,13.3147107 52.50668684,13.31468602 52.50669464,13.31466135 52.50670244,13.31463668 52.50671024,13.31461201 52.50671805,13.31458734 52.50672585,13.31456266 52.50673365,13.31453799 52.50674145,13.31451332 52.50674926,13.31448864848206 52.50675705869384,13.31447423 52.50676081,13.31445981 52.50676457,13.31444539 52.50676832,13.31443097 52.50677207,13.31441655 52.50677583,13.31440213 52.50677958,13.31438771 52.50678334,13.31437329 52.50678709,13.31435887 52.50679084,13.31434445 52.5067946,13.31433003 52.50679835,13.314315613930845 52.50680210611675,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.314315613930845 52.50680210611675,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.31431561 52.50680211,13.314315613930845 52.50680210611675,13.31430765 52.50679989,13.31429968 52.50679768,13.31429172 52.50679547,13.31428375 52.50679325,13.31427578 52.50679104,13.31426782 52.50678883,13.31425985 52.50678661,13.31425189 52.5067844,13.31424392 52.50678219,13.31423596 52.50677998,13.314227990138711 52.506777762346864,13.31421602 52.50677848,13.31420405 52.50677919,13.31419208 52.50677991,13.31418011 52.50678063,13.31416814 52.50678134,13.31415618 52.50678206,13.31414421 52.50678277,13.31413224 52.50678349,13.31412027 52.5067842,13.3141083 52.50678492,13.31409633 52.50678564,13.314084361707057 52.5067863511149,13.31406471 52.50678921,13.31404506 52.50679206,13.31402541 52.50679492,13.31400576 52.50679778,13.31398611 52.50680063,13.31396647 52.50680349,13.31394682 52.50680635,13.31392717 52.5068092,13.31390752 52.50681206,13.31388787 52.50681492,13.31386822 52.50681777,13.313848569316432 52.50682063012191,13.31382521 52.50682171,13.31380185 52.50682279,13.31377849 52.50682387,13.31375513 52.50682495,13.31373177 52.50682602,13.31370841 52.5068271,13.31368505 52.50682818,13.31366169 52.50682926,13.31363833 52.50683034,13.31361497 52.50683142,13.31359161 52.5068325,13.313568245993908 52.5068335772276,13.31354151 52.50683359,13.31351477 52.50683361,13.31348803 52.50683363,13.31346129 52.50683365,13.31343455 52.50683367,13.31340781 52.50683368,13.31338108 52.5068337,13.31335434 52.50683372,13.3133276 52.50683374,13.31330086 52.50683375,13.31327412 52.50683377,13.313247382509068 52.50683378864235,13.31321851 52.50683031,13.31318963 52.50682682,13.31316076 52.50682334,13.31313189 52.50681986,13.31310301 52.50681638,13.31307414 52.5068129,13.31304526 52.50680941,13.31301639 52.50680593,13.31298752 52.50680245,13.31295864 52.50679897,13.31292977 52.50679549,13.31290089287979 52.506792003136795,13.31287073 52.50678201,13.31284056 52.50677201,13.3128104 52.50676202,13.31278023 52.50675202,13.31275007 52.50674202,13.31271991 52.50673203,13.31268974 52.50672203,13.31265958 52.50671204,13.31262941 52.50670204,13.31259925 52.50669204,13.31256908 52.50668205,13.3125389185718 52.506672051461386,13.3125155 52.50666833,13.31249209 52.5066646,13.31246867 52.50666088,13.31244526 52.50665716,13.31242184 52.50665343,13.31239842 52.50664971,13.31237501 52.50664598,13.31235159 52.50664226,13.31232818 52.50663854,13.31230476 52.50663481,13.31228134 52.50663109,13.312257928045032 52.50662736298976,13.31223326 52.50662604,13.31220859 52.50662471,13.31218392 52.50662338,13.31215925 52.50662206,13.31213459 52.50662073,13.31210992 52.5066194,13.31208525 52.50661808,13.31206058 52.50661675,13.31203591 52.50661542,13.31201125 52.5066141,13.31198658 52.50661277,13.311961908869469 52.506611443330954,13.31193759 52.50661414,13.31191328 52.50661684,13.31188897 52.50661955,13.31186465 52.50662225,13.31184034 52.50662495,13.31181602 52.50662765,13.31179171 52.50663035,13.3117674 52.50663305,13.31174308 52.50663575,13.31171877 52.50663845,13.31169445 52.50664115,13.311670140569682 52.50664385093907,13.3116444 52.50664625,13.31161866 52.50664865,13.31159291 52.50665105,13.31156717 52.50665345,13.31154143 52.50665585,13.31151569 52.50665825,13.31148994 52.50666065,13.3114642 52.50666305,13.31143846 52.50666545,13.31141272 52.50666785,13.31138697359986 52.50667025345925,13.31136484 52.50667351,13.3113427 52.50667678,13.31132056 52.50668004,13.31129842 52.5066833,13.31127629 52.50668656,13.31125415 52.50668982,13.31123201 52.50669308,13.31120987 52.50669634,13.31118773 52.5066996,13.3111656 52.50670286,13.31114346 52.50670612,13.311121321894284 52.50670938294224,13.31109605 52.50671037,13.31107078 52.50671136,13.3110455 52.50671234,13.31102023 52.50671333,13.31099496 52.50671432,13.31096969 52.5067153,13.31094441 52.50671629,13.31091914 52.50671728,13.31089387 52.50671826,13.31086859 52.50671925,13.31084332 52.50672024,13.310818048866844 52.506721225100414,13.31079323 52.5067221,13.31076842 52.50672297,13.3107436 52.50672384,13.31071879 52.50672472,13.31069397 52.50672559,13.31066916 52.50672646,13.31064434 52.50672733,13.31061953 52.50672821,13.31059471 52.50672908,13.3105699 52.50672995,13.31054508 52.50673082,13.31052026810138 52.50673169514743,13.31049508 52.50672708,13.3104699 52.50672247,13.31044472 52.50671786,13.31041954 52.50671324,13.31039435 52.50670863,13.31036917 52.50670402,13.31034399 52.50669941,13.3103188 52.50669479,13.31029362 52.50669018,13.31026844 52.50668557,13.31024325 52.50668096,13.31021806940472 52.50667634450038,13.3102007 52.50667936,13.31018333 52.50668237,13.31016595 52.50668538,13.31014858 52.50668839,13.31013121 52.5066914,13.31011384 52.50669442,13.31009647 52.50669743,13.3100791 52.50670044,13.31006173 52.50670345,13.31004435 52.50670646,13.31002698 52.50670948,13.310009611526526 52.50671248730377,13.30999167 52.50671438,13.30997373 52.50671626,13.30995578 52.50671815,13.30993784 52.50672004,13.3099199 52.50672193,13.30990196 52.50672382,13.30988401 52.50672571,13.30986607 52.50672759,13.30984813 52.50672948,13.30983019 52.50673137,13.30981224 52.50673326,13.309794300190802 52.50673514817467,13.30978481 52.50673668,13.30977531 52.50673821,13.30976581 52.50673974,13.30975632 52.50674127,13.30974682 52.5067428,13.30973733 52.50674434,13.30972783 52.50674587,13.30971834 52.5067474,13.30970884 52.50674893,13.30969935 52.50675046,13.30968985 52.50675199,13.30968036 52.50675352,13.30967086 52.50675506,13.30966137 52.50675659,13.30965187 52.50675812,13.309642377256225 52.506759649781635,13.30964006 52.50675937,13.30963774 52.5067591,13.30963542 52.50675882,13.30963309 52.50675854,13.30963077 52.50675827,13.30962845 52.50675799,13.30962613 52.50675771,13.30962381 52.50675744,13.30962149 52.50675716,13.30961917 52.50675688,13.30961685 52.50675661,13.309614528464554 52.50675632940262,13.30961246 52.50675505,13.30961038 52.50675377,13.30960831 52.50675249,13.30960624 52.5067512,13.30960416 52.50674992,13.30960209 52.50674864,13.30960002 52.50674736,13.30959795 52.50674608,13.30959587 52.5067448,13.3095938 52.50674352,13.30959173 52.50674223,13.30958965405426 52.50674095329767,13.30958059 52.50674302,13.30957153 52.5067451,13.30956247 52.50674717,13.30955341 52.50674924,13.30954435 52.50675131,13.30953529 52.50675338,13.30952623 52.50675545,13.30951717 52.50675752,13.30950811 52.50675959,13.30949905 52.50676166,13.309489988751736 52.50676373426286,13.30946965 52.50676544,13.30944931 52.50676715,13.30942898 52.50676885,13.30940864 52.50677056,13.3093883 52.50677226,13.30936797 52.50677397,13.30934763 52.50677567,13.30932729 52.50677738,13.30930695 52.50677908,13.30928662 52.50678079,13.30926628 52.50678249,13.309245942112565 52.506784199795185))"
                query = f"INTERSECTS(trip, {random_berlin_route})"
                final_query = ssh_trip.replace("-q \"\"", f"-q \"{query}\"")
                if(limit == -1):
                    final_query = final_query.replace("-m", "")
                else:
                    final_query = final_query.replace("-m", f"-m {limit}")
                print(final_query)
                start = time.time()
                #run the query in the shell
                result = subprocess.run(final_query, shell=True, stdout=subprocess.PIPE)

                #run the query here
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")

                print(result)
            
            case "intersections":
               
                poslongstart, poslatstart = generate_random_position_in_Berlin()
                poslongend, poslatend = generate_random_position_in_Berlin()
                
                query =f"INTERSECTS(trip, LINESTRING({poslongstart} {poslatstart}, {poslongend} {poslatend}))"
                final_query = ssh_trip.replace("-q \"\"", f"-q \"{query}\"")
                if(limit == -1):
                    final_query = final_query.replace("-m", "")
                else:
                    final_query = final_query.replace("-m", f"-m {limit}")
                print(final_query)
                
                start = time.time()
                #run the query in the shell
                result = subprocess.run(final_query, shell=True, stdout=subprocess.PIPE)

                #run the query here
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                print(result)
            #insert a single trip into the database
            case "insert_ride":
                path_length = 0
                
                random_rider_id = random.randint(1, 30)
                ride_id = get_max_ride_id() + 1
                random_latitude = random.uniform(52.338049, 52.675454)
                random_longitude = random.uniform(13.088346, 13.761160)
                ride_date = time.strftime('%Y-%m-%d %H:%M:%S')
                initial_start = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]
                duration = 0
                while path_length < limit:
                    ride_date = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]
                    
                    random_latitude  += random.uniform(-0.000001, 0.000001)
                    random_longitude += random.uniform(-0.000001, 0.000001)
                    ride_date = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]

                    start = time.time()
                  # get time after executing query
                    end = time.time()
                    duration += end - start
                    path_length += 1
                end = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},1,{initial_start},{end},{duration}\n")
                print(f"Ride {ride_id} of length {path_length} inserted successfully into cycling_data table")
                
            #bulk insert ride_data

            case "bulk_insert_rides":
                rides_inserted = 0
                ride_id = get_max_ride_id() + 1
                while rides_inserted < limit:
                    path_length = 0
                    random_rider_id = random.randint(1, 30)
                    
                    random_latitude = random.uniform(52.338049, 52.675454)
                    random_longitude = random.uniform(13.088346, 13.761160)
                    ride_date = time.strftime('%Y-%m-%d %H:%M:%S')
                    initial_start = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]
                    duration = 0
                    while path_length < limit:
                        ride_date = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]
                        random_latitude  += random.uniform(-0.000001, 0.000001)
                        random_longitude += random.uniform(-0.000001, 0.000001)
                        ride_date = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]
                        
                        start = time.time()
                        
                        end = time.time()
                        duration += end - start
                        path_length += 1
                    end = time.strftime('%Y-%m-%d %H:%M:%S.%f')[:3]
                    rides_inserted += 1
                    ride_id += 1
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},1,{initial_start},{end},{duration}\n")
                print(f"Ride {ride_id} of length {path_length} inserted successfully into cycling_data table")
            #same as polygonal area for now?
            case "bounding_box":
                poslong, poslat = generate_random_position_in_Berlin()
                size = 0.1
                query = f"WITHIN(geom, POLYGON(({poslong-size} {poslat-size}, {poslong-size} {poslat+size}, {poslong+size} {poslat+size}, {poslong+size} {poslat-size}, {poslong-size} {poslat-size})))"
                final_query = ssh_point.replace("-q \"\"", f"-q \"{query}\"")
                if(limit == -1):
                    final_query = final_query.replace("-m", "")
                else:
                    final_query = final_query.replace("-m", f"-m {limit}")
                print(final_query)
                print(query)
                start = time.time()
                #run the query in the shell
                result = subprocess.run(final_query, shell=True, stdout=subprocess.PIPE)
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                print(result)
            case "polygonal_area":
                lat1 , lon1 = generate_random_position_in_Berlin()
                lat2 , lon2 = generate_random_position_in_Berlin()
                lat3 , lon3 = generate_random_position_in_Berlin()
                lat4 , lon4 = generate_random_position_in_Berlin()
                query = f"WITHIN(geom, POLYGON(({lon1} {lat1}, {lon2} {lat2}, {lon3} {lat3}, {lon4} {lat4}, {lon1} {lat1})))"
                final_query = ssh_point.replace("-q \"\"", f"-q \"{query}\"")
                if(limit == -1):
                    final_query = final_query.replace("-m", "")
                else:
                    final_query = final_query.replace("-m", f"-m {limit}")
                print(final_query)
                start = time.time()
                #run the query in the shell
                result = subprocess.run(final_query, shell=True, stdout=subprocess.PIPE)
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                print(result)
            
            #temporal query POSTGIS style
            case "time_interval":

                # define start and end time for the query
                start_time = "2023-07-23T00:00:00Z"
                end_time = "2023-07-23T23:59:59Z"
                query = f"timestamp < '{end_time}' AND timestamp > '{start_time}'"
                final_query = ssh_point.replace("-q \"\"", f"-q \"{query}\"")
                if(limit == -1):
                    final_query = final_query.replace("-m", "")
                else:
                    final_query = final_query.replace("-m", f"-m {limit}")
                print(final_query)
                start = time.time()
                #run the query in the shell
                result = subprocess.run(final_query, shell=True, stdout=subprocess.PIPE)
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                print(result)

            #MobilityDB feature test
            case "get_trip":
                # define start and end time for the query
                ride_id = random.randint(1, 400)
                query = f"ride_id = {ride_id}"
                final_query = ssh_trip.replace("-q \"\"", f"-q \"{query}\"")
                if(limit == -1):
                    final_query = final_query.replace("-m", "")
                else:
                    final_query = final_query.replace("-m", f"-m {limit}")
                print(final_query)
                start = time.time()
                #run the query in the shell
                result = subprocess.run(final_query, shell=True, stdout=subprocess.PIPE)
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                print(result)
            case "get_trip_length":
                # define start and end time for the query
                ride_id = random.randint(1, 400)
                
                print(query)
                start = time.time()
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                records = ""
                print(records)
            #MobiilityDB temporal support test
            case "get_trip_duration":
                # define start and end time for the query
                ride_id = random.randint(1, 400)
               
                start = time.time()
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                records = ""
                print(records)
            case "get_trip_speed":
                # define start and end time for the query
                ride_id = random.randint(1, 400)
                
                start = time.time()
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                records = ""
                print(records)
            case "interval_around_timestamp":
                # define start and end time for the query
                start_time = "2023-07-01 00:00:00"

                start = time.time()
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                records = ""
                print(records)
            case "spatiotemporal":
                # define start and end time for the query
                start_time = "2023-07-01 00:00:00"
                end_time = "2023-07-01 01:00:00"
                poslong, poslat = generate_random_position_in_Berlin()
                start = time.time()
                # get time after executing query
                end = time.time()
                duration = end - start
                # write the duration, along with other query data, to a file
                with open("durations.csv", "a") as file:
                    file.write(f"{query_type},{limit},{start},{end},{duration}\n")
                records = ""
                print(records)

    except (Exception) as error:
        print("Error while connecting", error)

    finally:
        print("Done")
# List of queries to execute
def run_threads(num_threads, query_type, limit):
    threads = []

    
    for i in range(num_threads):
        thread = threading.Thread(target=execute_query, args=(query_type, limit))
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()
        # clear the threads list
        threads.clear()

# Create and start a thread until the number of threads is reached
# run mini benchmark
#setup benchmark for geomesa instead of mobilityDB, but use same queries in CQL
#set deployment variable if you want to use single or multi node setup


if len(sys.argv) < 2:
    print("Please provide the deployment type (single/multi) as an argument")
    sys.exit(1)
deployment = sys.argv[1]
if(deployment == ""):
    deployment = "multi"
terraform_output = get_terraform_output(deployment)
#get variables ssh_user and ip from terraform output
ssh_user = terraform_output["ssh_user"]["value"]
ip = ""
if(deployment == "single"):
    ip = terraform_output["external_ip_sut_manager"]["value"]
else:
    ip = terraform_output["external_ip_sut_namenode_manager"]["value"]

ssh_point = f"ssh {ssh_user}@{ip} '/opt/geomesa-accumulo/bin/geomesa-accumulo export -i test -z localhost -u root  -p test -c example -m -q \"\" -f ride_data'"
ssh_trip = f"ssh {ssh_user}@{ip} '/opt/geomesa-accumulo/bin/geomesa-accumulo export -i test -z localhost -u root  -p test -c example -m -q \"\" -f trip_data'"



#initial insert of data if not done on machine, 
#clear_table('cycling_data')
#clear_table('cycling_trips')
#initial_insert()



#Configure the benchmark
#run_threads(#Number of parallel threads, default query to use, query type, limit)


#TODO fix this and possibly use yaml for configuration
# benchmark_config = yaml.safe_load(open("benchmark_conf.yaml"))
# #print items of surrounding from benchmark_config
# print(benchmark_config['surrounding'])

# surrounding = benchmark_config['surrounding']
# ride_traffic = benchmark_config['ride_traffic']
# intersections = benchmark_config['intersections']
# insert_ride = benchmark_config['insert_ride']
# bulk_insert_rides = benchmark_config['bulk_insert_rides']
# bounding_box = benchmark_config['bounding_box']
# polygonal_area = benchmark_config['polygonal_area']
# time_interval = benchmark_config['time_interval']
# get_trip = benchmark_config['get_trip']
# get_trip_length = benchmark_config['get_trip_length']
# get_trip_duration = benchmark_config['get_trip_duration']
# get_trip_speed = benchmark_config['get_trip_speed']
# interval_around_timestamp = benchmark_config['interval_around_timestamp']
# spatiotemporal = benchmark_config['spatiotemporal']
#run threads with the configurations instead of hardcoding


#Run the benchmark
run_threads(1, "surrounding", -1)
run_threads(1, "ride_traffic", -1)
run_threads(1, "intersections", -1)
#run_threads(1, "insert_ride", -1)
#run_threads(1, "bulk_insert_rides", -1)
run_threads(1, "bounding_box", -1)
run_threads(1, "polygonal_area", -1)
run_threads(1, "time_interval", -1)
run_threads(1, "get_trip", -1)
#run_threads(1, "get_trip_length", -1)
#run_threads(1, "get_trip_duration", -1)
#run_threads(1, "get_trip_speed", -1)
#run_threads(1, "interval_around_timestamp", -1)
#run_threads(1, "spatiotemporal", -1)


#run_threads(2, default_query, "ride_traffic", 50)
#run_threads(2, default_query, "intersections", 50)
#run_threads(2, default_query, "insert_ride", 10)
#run_threads(1, default_query, "bulk_insert_rides", 10)
#run_threads(2, default_query, "bounding_box", 50)
#run_threads(2, default_query, "polygonal_area", 50)
#run_threads(2, default_query, "time_interval", 50)
#run_threads(2, default_query, "get_trip", 50)
#run_threads(2, default_query, "get_trip_length", 50)
#run_threads(2, default_query, "get_trip_duration", 50)
#run_threads(2, default_query, "get_trip_speed", 50)
#run_threads(2, default_query, "interval_around_timestamp", 50)
#run_threads(2, default_query, "spatiotemporal", 50)
